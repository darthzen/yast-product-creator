/**
 * File:	include/product-creator/routines.ycp
 * Package:	Configuration of product-creator
 * Summary:	Miscelanous functions for configuration of product-creator.
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

textdomain "product-creator";

import "Kiwi";
import "Progress";

// shortcut for returning "descripton" value from a map describing config.xml
string get_description (map config, string key) {
    return config["description",0,key,0,Kiwi::content_key]:"";
}

// shortcut for returning "preferences" value from a map describing config.xml
string get_preferences (map config, string key, any defval) {
    return sformat ("%1",
	config["preferences",0,key,0,Kiwi::content_key]:defval);
}

// update the whole map with a new key in preferences section
map<string,any> save_preferences (map<string,any> config, string key, string val) {
    config["preferences",0,key]	= [
	$[
	    Kiwi::content_key	: val
	]
    ];
    return config;
}

// get the primary value of image type to be built ('type' from 'preferences')
string get_current_task (map config) {

    string task	= "";
    foreach (map typemap, (list<map>) config["preferences",0,"type"]:[], {
	if (task == "") // take the 1st one if none is default
	    task   = typemap["image"]:task;
	if (tolower (typemap["primary"]:"false") == "true")
	{
	    task   = typemap["image"]:task;
	    break;
	}
    });
    if (task == "")
    {
	y2milestone ("no task found, setting to 'iso'");
    }
    return task;
}

// return the size info for current image type
map get_current_size_map (map config, string task) {

    map	ret	= $[];
    foreach (map typemap, (list<map>) config["preferences",0,"type"]:[], {
	if (task == typemap["image"]:"")
	    ret = typemap["size",0]:$[];
    });
    return ret;
}


// get the value of boot image directory
string get_bootdir (map config, string task) {

    string dir	= "";
    foreach (map typemap, (list<map>) config["preferences",0,"type"]:[], {
	if (task == typemap["image"]:"")
	{
	    dir	= typemap["boot"]:"";
	    break;
	}
    });
    return dir;
}

/* EOF */
}
